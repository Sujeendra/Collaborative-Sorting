/* Auto-generated by genmsg_cpp for file /home/sujee/catkin_ws/src/action_pr2/srv/ExecuteCartesianTrajectory.srv */
#ifndef ACTION_PR2_SERVICE_EXECUTECARTESIANTRAJECTORY_H
#define ACTION_PR2_SERVICE_EXECUTECARTESIANTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"



namespace action_pr2
{
template <class ContainerAllocator>
struct ExecuteCartesianTrajectoryRequest_ {
  typedef ExecuteCartesianTrajectoryRequest_<ContainerAllocator> Type;

  ExecuteCartesianTrajectoryRequest_()
  : header()
  , poses()
  {
  }

  ExecuteCartesianTrajectoryRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , poses(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  poses;


  typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ExecuteCartesianTrajectoryRequest
typedef  ::action_pr2::ExecuteCartesianTrajectoryRequest_<std::allocator<void> > ExecuteCartesianTrajectoryRequest;

typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryRequest> ExecuteCartesianTrajectoryRequestPtr;
typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryRequest const> ExecuteCartesianTrajectoryRequestConstPtr;



template <class ContainerAllocator>
struct ExecuteCartesianTrajectoryResponse_ {
  typedef ExecuteCartesianTrajectoryResponse_<ContainerAllocator> Type;

  ExecuteCartesianTrajectoryResponse_()
  : success(0)
  {
  }

  ExecuteCartesianTrajectoryResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef uint32_t _success_type;
  uint32_t success;


  typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ExecuteCartesianTrajectoryResponse
typedef  ::action_pr2::ExecuteCartesianTrajectoryResponse_<std::allocator<void> > ExecuteCartesianTrajectoryResponse;

typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryResponse> ExecuteCartesianTrajectoryResponsePtr;
typedef boost::shared_ptr< ::action_pr2::ExecuteCartesianTrajectoryResponse const> ExecuteCartesianTrajectoryResponseConstPtr;


struct ExecuteCartesianTrajectory
{

typedef ExecuteCartesianTrajectoryRequest Request;
typedef ExecuteCartesianTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ExecuteCartesianTrajectory
} // namespace action_pr2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "916c28c5764443f268b296bb671b9d97";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x916c28c5764443f2ULL;
  static const uint64_t static_value2 = 0x68b296bb671b9d97ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_pr2/ExecuteCartesianTrajectoryRequest";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "952fc3b34491dbd8ce5170ced8b373fa";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x952fc3b34491dbd8ULL;
  static const uint64_t static_value2 = 0xce5170ced8b373faULL;
};

template<class ContainerAllocator>
struct DataType< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_pr2/ExecuteCartesianTrajectoryResponse";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 success\n\
\n\
";
  }

  static const char* value(const  ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.poses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ExecuteCartesianTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ExecuteCartesianTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<action_pr2::ExecuteCartesianTrajectory> {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectory&) { return value(); } 
};

template<>
struct DataType<action_pr2::ExecuteCartesianTrajectory> {
  static const char* value() 
  {
    return "action_pr2/ExecuteCartesianTrajectory";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_pr2/ExecuteCartesianTrajectory";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_pr2/ExecuteCartesianTrajectory";
  }

  static const char* value(const action_pr2::ExecuteCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ACTION_PR2_SERVICE_EXECUTECARTESIANTRAJECTORY_H

